// Copyright 2015 ThoughtWorks, Inc.

// This file is part of gauge-proto.

// gauge-proto is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// gauge-proto is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with gauge-proto.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package gauge.messages;

// ExecutionRequest defines the structure of requests that the API's consumers can send to request execution of specs/scenarios
message ExecutionRequest {
    // Each ExecutionRequest can ask to execute multiple spec files or multiple scenarios in a spec or a directory or all
    repeated string specs = 1;
    // Tag expression to filter specs and scenarios during execution. Default: ""
    string tags = 2;
    // The working directory for gauge.
    string workingDir = 3;
    // Environment to choose for gauge.
    string environment = 4;
    // Types of log level that gauge supports
    enum LogLevel {
        INFO = 0;
        DEBUG = 1;
        WARNING = 2;
        ERROR = 3;
    }
    LogLevel logLevel = 5;
    // Whether to run gauge in parallel mode.
    bool isParallel = 6;
    // If isParallel is true, this specifies how many parallel streams to run.
    int32 parallelStreams = 7;
    // Specify which group of specs to execute, based on number of parallel streams. Works only when strategy is EAGER.
    int32 group = 8;
    // Toggles simple console reporting
    bool simpleConsole = 9;
    // If true, sorts execution of specifications alphabetically
    bool sort = 10;
    // Strategies for parallelization
    enum Strategy {
        LAZY = 0;
        EAGER = 1;
    }
    Strategy strategy = 11;
    // Specify against which rows of datatable the scenarios should be executed
    string tableRows = 12;
}

// ExecutionResponse defines the structure of response for ExecutionRequest message
message ExecutionResponse {
    // Types of Execution result
    enum ExecutionResponseType {
        ScenarioResult = 0;
        BeforeSuiteHookResult = 1;
        AfterSuiteHookResult = 2;
        BeforeSpecHookResult = 3;
        AfterSpecHookResult = 4;
        SuiteDataStoreInitResult = 5;
        SpecDataStoreInitResult = 6;
        ValidationResult = 7;
    }
    ExecutionResponseType type = 1;
    // An identifier for the current execution result
    string ID = 2;
    // Specifies the execution status
    enum Status {
      PASSED = 0;
      FAILED = 1;
      SKIPPED = 2;
    }
    Status status = 3;
    // Contains the Execution error and its details
    repeated ExecutionError error = 4;
    // Specifies the execution time
    int64 executionTime = 5;
    // Contains the console output messages
    string stdout = 6;
}

// ExecutionError represents the failure during execution along with details of failure
message ExecutionError {
    /// Stacktrace from the failure
    string stackTrace = 1;
    /// Error message from the failure
    string errorMessage = 2;
    /// Byte array holding the screenshot taken at the time of failure.
    bytes screenShot = 3;
}

// Define the gRPC service
service Execution {
    // Bind RPC method
    rpc execute (ExecutionRequest) returns (stream ExecutionResponse) {}
}
