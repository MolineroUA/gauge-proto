// Copyright 2015 ThoughtWorks, Inc.

// This file is part of gauge-proto.

// gauge-proto is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// gauge-proto is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with gauge-proto.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto2";
package gauge.messages;

// ExecutionRequest defines the structure of requests that the API's consumers can send to request execution of specs/scenarios
message ExecutionRequest {
    // Each ExecutionRequest can ask to execute multiple spec files or multiple scenarios in a spec or a directory or all
    repeated string specs = 1;
    // Contains all the flags required for execution
    repeated flag flags = 2;
    // Store name and value for a specific flag
    message flag {
        optional string name = 1;
        optional string value = 2;
    }
}

message Result {
    // Specifies the execution status
    enum Status {
      PASSED = 0;
      FAILED = 1;
      SKIPPED = 2;
    }
    optional Status status = 1;
    // Contains the Execution errors and its details
    repeated ExecutionError errors = 2;
    // ExecutionError represents the failure during execution along with details of failure
    message ExecutionError {
        // Error message from the failure
        optional string errorMessage = 1;
        // Stacktrace from the failure
        optional string stackTrace = 2;
        // Byte array holding the screenshot taken at the time of failure.
        optional bytes screenshot = 3;
    }
    // Specifies the execution time
    optional int64 executionTime = 3;
    // Contains the console output messages
    optional string stdout = 4;
    // Holds the before hook failure
    optional ExecutionError beforeHookFailure = 5;
    // Holds the after hook failure
    optional ExecutionError afterHookFailure = 6;
    // Holds the table row number (starting with 1) against which the scenario was executed.
    // This field is populated only for data table driven scenarios.
    optional int64 tableRowNumber = 7;
}

// ExecutionResponse defines the structure of response for ExecutionRequest message
message ExecutionResponse {
    // Types of Execution respone
    enum Type {
        SuiteStart = 0;
        SpecStart = 1;
        ScenarioStart = 2;
        ScenarioEnd = 3;
        SpecEnd = 4;
        SuiteEnd = 5;
        ErrorResult = 6;
    }
    // Response type
    required Type type = 1;
    // An identifier for the current execution result. This field is populated only for spec/scenario result.
    // For spec, the value will be the filename.
    // For scenario, the value will be filename:scenario_heading_line_num.
    optional string ID = 2;
    // Contains all the result details. This field is populated only for ScenarioStart, ScenaioEnd, SpecEnd, SuiteEnd, ErrorResult
    optional Result result = 3;
}

// Define the gRPC service
service Execution {
    // Bind RPC method
    rpc execute (ExecutionRequest) returns (stream ExecutionResponse) {}
}
