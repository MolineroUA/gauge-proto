// Copyright 2015 ThoughtWorks, Inc.

// This file is part of gauge-proto.

// gauge-proto is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// gauge-proto is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with gauge-proto.  If not, see <http://www.gnu.org/licenses/>.

/// Defines communication messages for API
/// Every API call will have a Request & Response pair

// The comments are exported to Markdown, hence they may contain markdown syntax and cross-refs.

syntax = "proto2";
package gauge.messages;
import "spec.proto";

/// Request to get the Root Directory of the project
message GetProjectRootRequest {
}

/// Response of GetProjectRootRequest.
message GetProjectRootResponse {
  /// Holds the absolute path of the Project Root directory.
  required string projectRoot = 1;
}

/// Request to get the Root Directory of the Gauge installation
message GetInstallationRootRequest {
}

/// Response of GetInstallationRootRequest
message GetInstallationRootResponse {
  /// Holds the absolute path of the Gauge installation directory
  required string installationRoot = 1;
}

/// Request to get all Steps in the project
message GetAllStepsRequest {
}

/// Response to GetAllStepsRequest
message GetAllStepsResponse {
  /// Holds a collection of Steps that are defined in the project.
  repeated gauge.messages.ProtoStepValue allSteps = 1;
}

/// Request to get all Specs in the project
message SpecsRequest {
  repeated string specs = 1;
}

/// Response to GetAllSpecsRequest
message SpecsResponse {
  /// Holds a collection of Spec details.
  repeated SpecDetail details = 1;

  message SpecDetail {
    /// Holds a collection of Specs that are defined in the project.
    optional gauge.messages.ProtoSpec spec = 1;
    /// Holds a collection of parse errors present in the above spec.
    repeated Error parseErrors = 2;
  }
}

message Error {
  /// Holds the filename.
  required string filename = 1;
  /// Holds the line number of the error in file.
  required int32 lineNumber = 2;
  /// Holds the error message.
  required string message = 3;
}

/// Request to get all Concepts in the project
message GetAllConceptsRequest {
}

/// Response to GetAllConceptsResponse
message GetAllConceptsResponse {
  /// Holds a collection of Concepts that are defined in the project.
  repeated ConceptInfo concepts = 1;
}

/// Details of a Concept
message ConceptInfo {
  /// The text that defines a concept
  required gauge.messages.ProtoStepValue stepValue = 1;
  /// The absolute path to the file that contains the Concept
  required string filepath = 2;
  /// The line number in the file where the concept is defined.
  required int32 lineNumber = 3;
}

/// Request to get a Step Value.
message GetStepValueRequest {
  /// The text of the Step.
  required string stepText = 1;
  /// Flag to indicate if the Step has an inline table.
  optional bool hasInlineTable = 2;
}

/// Response to GetStepValueRequest
message GetStepValueResponse {
  /// The Step corresponding to the request provided.
  required gauge.messages.ProtoStepValue stepValue = 1;
}

/// Request to get the location of language plugin's Lib directory
message GetLanguagePluginLibPathRequest {
  /// The language to locate the lib directory for.
  required string language = 1;
}

/// Response to GetLanguagePluginLibPathRequest
message GetLanguagePluginLibPathResponse {
  /// Absolute path to the Lib directory of the language.
  required string path = 1;
}

/// A generic failure response
message ErrorResponse {
  /// Actual error message
  required string error = 1;
}

/// Request to perform a Refactor
message PerformRefactoringRequest {
  /// Step to refactor
  required string oldStep = 1;
  /// Change to be made
  required string newStep = 2;
}

/// Response to PerformRefactoringRequest
message PerformRefactoringResponse {
  /// Flag indicating Success
  required bool success = 1;
  /// Error message if the refactoring was unsuccessful.
  repeated string errors = 2;
  /// Collection of files that were changed as part of the Refactoring.
  repeated string filesChanged = 3;
}

/// Request to perform Extract to Concept refactoring
/// The runner does not do the refactoring here, instead it provides inputs enabling the IDE to do refactoring
message ExtractConceptInfoRequest {
  /// The text blob containing steps that should be refactored to concept.
  required string text = 1;
}

/// Request to perform Extract to Concept refactoring
message ExtractConceptRequest {
  /// The Concept name given by the user
  required step conceptName = 1;
  /// steps to extract
  repeated step steps = 2;
  /// Flag indicating if refactoring should be done across project
  required bool changeAcrossProject = 3;
  /// The concept filename in which extracted concept will be added
  required string conceptFileName = 4;
  /// Info related to selected text, required only if changeAcrossProject is false
  optional textInfo selectedTextInfo = 5;
}

message textInfo {
  /// The filename from where concept is being extracted
  required string fileName = 1;
  /// storing the starting and ending line number of selected text
  required int32 startingLineNo = 2;
  required int32 endLineNo = 3;
}

message step {
  /// name of the step
  required string name = 1;
  ///  table present in step as parameter
  optional string table = 2;
  /// name of table in concept heading, if it comes as a param to concept
  optional string paramTableName = 3;
}

/// Response to perform Extract to Concept refactoring
message ExtractConceptResponse {
  /// Flag indicating Success
  required bool isSuccess = 1;
  /// Error message if the refactoring was unsuccessful.
  optional string error = 2;
  /// Collection of files that were changed as part of the Refactoring.
  repeated string filesChanged = 3;
}

/// Request to format spec files
message FormatSpecsRequest {
    /// Specs to be formatted
    repeated string specs = 1;
}

/// Response on formatting spec files
message FormatSpecsResponse {
    /// Errors occurred on formatting
    repeated string errors = 1;
    /// Warnings occurred on formatting
    repeated string warnings = 2;
}

/// Response when a API message request is not supported.
message UnsupportedApiMessageResponse {
}

/// A generic message composing of all possible operations.
/// One of the Request/Response fields will have value, depending on the MessageType set.
message APIMessage {
  enum APIMessageType {
    GetProjectRootRequest = 1;
    GetProjectRootResponse = 2;
    GetInstallationRootRequest = 3;
    GetInstallationRootResponse = 4;
    GetAllStepsRequest = 5;
    GetAllStepResponse = 6;
    SpecsRequest = 7;
    SpecsResponse = 8;
    GetStepValueRequest = 9;
    GetStepValueResponse = 10;
    GetLanguagePluginLibPathRequest = 11;
    GetLanguagePluginLibPathResponse = 12;
    ErrorResponse = 13;
    GetAllConceptsRequest = 14;
    GetAllConceptsResponse = 15;
    PerformRefactoringRequest = 16;
    PerformRefactoringResponse = 17;
    ExtractConceptRequest = 18;
    ExtractConceptResponse = 19;
    FormatSpecsRequest = 20;
    FormatSpecsResponse = 21;
    UnsupportedApiMessageResponse = 22;
  }

  /// Type of API call being made
  required APIMessageType messageType = 1;
  /// A unique id to represent this message. A response to the message should copy over this value.
  /// This is used to synchronize messages & responses
  required int64 messageId = 2;

  /// [GetProjectRootRequest](#gauge.messages.GetProjectRootRequest)
  optional GetProjectRootRequest projectRootRequest = 3;
  /// [GetProjectRootResponse](#gauge.messages.GetProjectRootResponse)
  optional GetProjectRootResponse projectRootResponse = 4;
  /// [GetInstallationRootRequest](#gauge.messages.GetInstallationRootRequest)
  optional GetInstallationRootRequest installationRootRequest = 5;
  /// [GetInstallationRootResponse](#gauge.messages.GetInstallationRootResponse)
  optional GetInstallationRootResponse installationRootResponse = 6;
  /// [GetAllStepsRequest](#gauge.messages.GetAllStepsRequest)
  optional GetAllStepsRequest allStepsRequest = 7;
  /// [GetAllStepsResponse](#gauge.messages.GetAllStepsResponse)
  optional GetAllStepsResponse allStepsResponse = 8;
  /// [GetAllSpecsRequest](#gauge.messages.GetAllSpecsRequest)
  optional SpecsRequest specsRequest = 9;
  /// [GetAllSpecsResponse](#gauge.messages.GetAllSpecsResponse)
  optional SpecsResponse specsResponse = 10;
  /// [GetStepValueRequest](#gauge.messages.GetStepValueRequest)
  optional GetStepValueRequest stepValueRequest = 11;
  /// [GetStepValueResponse](#gauge.messages.GetStepValueResponse)
  optional GetStepValueResponse stepValueResponse = 12;
  /// [GetLanguagePluginLibPathRequest](#gauge.messages.GetLanguagePluginLibPathRequest)
  optional GetLanguagePluginLibPathRequest libPathRequest = 13;
  /// [GetLanguagePluginLibPathResponse](#gauge.messages.GetLanguagePluginLibPathResponse)
  optional GetLanguagePluginLibPathResponse libPathResponse = 14;
  /// [ErrorResponse](#gauge.messages.ErrorResponse)
  optional ErrorResponse error = 15;
  /// [GetAllConceptsRequest](#gauge.messages.GetAllConceptsRequest)
  optional GetAllConceptsRequest allConceptsRequest = 16;
  /// [GetAllConceptsResponse](#gauge.messages.GetAllConceptsResponse)
  optional GetAllConceptsResponse allConceptsResponse = 17;
  /// [PerformRefactoringRequest](#gauge.messages.PerformRefactoringRequest)
  optional PerformRefactoringRequest performRefactoringRequest = 18;
  /// [PerformRefactoringResponse](#gauge.messages.PerformRefactoringResponse)
  optional PerformRefactoringResponse performRefactoringResponse = 19;
  /// [ExtractConceptRequest](#gauge.messages.ExtractConceptRequest)
  optional ExtractConceptRequest extractConceptRequest = 20;
  /// [ExtractConceptResponse](#gauge.messages.ExtractConceptResponse)
  optional ExtractConceptResponse extractConceptResponse = 21;
  /// [FormatSpecsRequest] (#gauge.messages.FormatSpecsRequest)
  optional FormatSpecsRequest formatSpecsRequest = 22;
  /// [FormatSpecsResponse] (#gauge.messages.FormatSpecsResponse)
  optional FormatSpecsResponse formatSpecsResponse = 23;
  /// [UnsupportedApiMessageResponse] (#gauge.messages.UnsupportedApiMessageResponse)
  optional UnsupportedApiMessageResponse unsupportedApiMessageResponse= 24;
}
